// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  phone            String?
  address          String?  @db.Text
  subscriptionPlan SubscriptionPlan @default(BASIC) @map("subscription_plan")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  users User[]
  
  @@map("clinics")
}

model User {
  id              String    @id @default(uuid())
  clinicId        String    @map("clinic_id")
  email           String    @unique
  passwordHash    String    @map("password_hash")
  firstName       String    @map("first_name")
  lastName        String    @map("last_name")
  role            UserRole
  phone           String?
  licenseNumber   String?   @map("license_number")
  specialization  String?
  isActive        Boolean   @default(true) @map("is_active")
  emailVerified   Boolean   @default(false) @map("email_verified")
  lastLogin       DateTime? @map("last_login")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  clinic        Clinic         @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  refreshTokens RefreshToken[]
  sessions      UserSession[]
  
  // Indexes
  @@index([clinicId, email])
  @@index([role])
  @@index([isActive])
  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([expiresAt])
  @@index([tokenHash])
  @@map("refresh_tokens")
}

model UserSession {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  ipAddress String?   @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent") @db.Text
  loginAt   DateTime  @default(now()) @map("login_at")
  logoutAt  DateTime? @map("logout_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([loginAt])
  @@map("user_sessions")
}

// Enums
enum UserRole {
  ADMIN          @map("admin")
  DOCTOR         @map("doctor")
  NURSE          @map("nurse")
  LAB_TECH       @map("lab_tech")
  PATIENT        @map("patient")
  RECEPTIONIST   @map("receptionist")
  PHARMACIST     @map("pharmacist")

  @@map("UserRole")
}

enum SubscriptionPlan {
  BASIC          @map("basic")
  PROFESSIONAL   @map("professional")
  ENTERPRISE     @map("enterprise")

  @@map("SubscriptionPlan")
}